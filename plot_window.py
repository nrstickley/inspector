import copy
import sys
import io
import traceback

from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont, QColor, QPalette, QTextCursor
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPlainTextEdit, QPushButton
import matplotlib

matplotlib.use('Qt5Agg')

from matplotlib.backends.backend_qt5agg import FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib import pyplot as plt
import numpy as np

from syntax import PythonHighlighter


class CommandBox(QPlainTextEdit):
    def __init__(self, plot_window):
        super().__init__()
        self._plot_window = plot_window
        self.setFont(QFont('monospace'))
        p = self.palette()
        p.setColor(QPalette.All, QPalette.Base,  QColor('#2f3030'))
        p.setColor(QPalette.All, QPalette.Text,  QColor('#f7f7f7'))
        self.setPalette(p)
        self._highlighter = PythonHighlighter(self.document())
        self.setFocusPolicy(Qt.StrongFocus)
        self.local_vars = {}

    def keyPressEvent(self, event):
        if Qt.ShiftModifier & event.modifiers() and (event.key() == Qt.Key_Enter or event.key() == Qt.Key_Return):
            self._plot_window.exec_command()
        elif Qt.ControlModifier & event.modifiers() and event.key() == Qt.Key_L:
            self.clear()
        elif Qt.ControlModifier & event.modifiers() and event.key() == Qt.Key_D:
            self._plot_window.show_editor()
        else:
            super().keyPressEvent(event)


class PlotWindow(QWidget):
    """
    A container in which to place plots generated by matplotlib.
    """
    closing = pyqtSignal([str])

    def __init__(self, title, shape=None, *args):
        super().__init__(*args)

        self.setWindowTitle(title)
        self.setWindowFlag(Qt.Window, True)
        self.setContentsMargins(0, 0, 0, 0)
        self._descriptor = ''
        self.setFocusPolicy(Qt.StrongFocus)

        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)

        self.title = title

        if shape is None:
            self.fig, self.axis = plt.subplots()
            self.axis.set_title(self.title)
        else:
            rows, columns = shape
            self.fig, self.axis = plt.subplots(rows, columns)
            self.fig.suptitle(title)

        self.fig.set_dpi(100)

        self.figure_widget = FigureCanvas(self.fig)
        self.figure_widget.setMinimumHeight(500)

        toolbar = NavigationToolbar(self.figure_widget, self)
        toolbar.addAction('Edit', self.show_editor)

        layout.addWidget(self.figure_widget)
        layout.addWidget(toolbar)

        self._command_box = None
        self._run_command_btn = None
        self._highlighter = None

        self.setLayout(layout)

    @property
    def descriptor(self):
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        if not isinstance(descriptor, str):
            raise TypeError('The descriptor must be a string.')

        self._descriptor = descriptor

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Q or event.key() == Qt.Key_Escape:
            self.closing.emit(self._descriptor)
            self.close()

        if event.modifiers() & Qt.ControlModifier and event.key() == Qt.Key_M:
            self.show_editor()

    def closeEvent(self, event):
        self.closing.emit(self._descriptor)
        plt.close(self.fig)
        super().closeEvent(event)

    def show_editor(self):
        if self._command_box is None:
            self._command_box = CommandBox(self)
            self._command_box.setPlaceholderText('Enter plotting commands here, using `fig` and `axis`.')
            self._command_box.setMinimumHeight(200)

            local_vars = copy.copy(self.__dict__)
            local_vars['exit'] = self.show_editor
            local_vars['close'] = self.show_editor
            local_vars['np'] = np

            self._command_box.local_vars = local_vars

            self._run_command_btn = QPushButton('Execute Command')
            self._run_command_btn.setMinimumSize(150, 25)
            self._run_command_btn.setMaximumSize(200, 30)
            self._run_command_btn.pressed.connect(self.exec_command)

            self.layout().addWidget(self._command_box)
            self.layout().addWidget(self._run_command_btn)
            self.layout().setAlignment(self._run_command_btn, Qt.AlignHCenter)
        else:
            self._command_box.hide()
            self._run_command_btn.hide()
            self.layout().removeWidget(self._run_command_btn)
            self.layout().removeWidget(self._command_box)
            self._run_command_btn = None
            self._command_box = None
            self.layout().update()
            self.update()

    def exec_command(self):
        if self._command_box is None:
            return

        stdout = sys.stdout

        separator = '\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *'

        sys.stdout = out = io.StringIO()
        err = io.StringIO()

        command_box_text = self._command_box.toPlainText()

        cursor_pos = command_box_text.rfind(separator)

        command_text = command_box_text if cursor_pos == -1 else command_box_text[cursor_pos + len(separator):].strip()

        try:
            exec(command_text, {}, self._command_box.local_vars)
        except Exception as ex:
            err.write(repr(ex))
            traceback.print_stack(file=err)

        total_output = command_box_text
        std_output = out.getvalue()

        if len(std_output) > 0:
            total_output += f'\n\nOut:\n\n{std_output}'

        error = err.getvalue()

        if len(error) > 0:
            total_output += f'\n\nError:\n\n{error}'

        total_output += separator + '\n\n'

        if self._command_box is None:
            self.fig.canvas.draw()
            sys.stdout = stdout
            return

        self._command_box.setPlainText(total_output)

        text_cursor = self._command_box.textCursor()
        text_cursor.movePosition(QTextCursor.End)
        self._command_box.setTextCursor(text_cursor)

        self.fig.canvas.draw()

        vbar = self._command_box.verticalScrollBar()
        vbar.setValue(vbar.maximum())

        sys.stdout = stdout
